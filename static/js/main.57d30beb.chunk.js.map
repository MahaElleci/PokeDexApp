{"version":3,"sources":["overmind/actions.jsx","overmind/effects.jsx","overmind/index.js","overmind/state.jsx","assets/loader.gif","components/PokemonCard/PokemonCard.jsx","components/PokeDexWrapper/PokeDex.jsx","reportWebVitals.js","index.js"],"names":["loadApp","a","effects","state","isLoading","getPokemons","pokemons","setSelectedPokedata","url","getPokemonData","selectedPokemon","setCachedPokemon","cachedPokemon","JSON","parse","axios","get","response","data","results","config","actions","useOvermind","createHook","PokemonCard","item","useState","cardSelected","setCardSelected","detailsOpened","setDetailsOpened","popover","Popover","id","Title","as","Content","className","src","loader","types","map","i","type","name","Accordion","defaultActiveKey","Toggle","onClick","NavLink","variant","eventKey","Collapse","stats","base_stat","effort","stat","useEffect","localStorage","getItem","render","history","OverlayTrigger","onToggle","onEntered","setItem","stringify","onEntering","push","trigger","placement","overlay","rootClose","PokeDex","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","overmind","createOvermind","devtools","ReactDOM","value","document","getElementById"],"mappings":"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","file":"static/js/main.57d30beb.chunk.js","sourcesContent":["export const loadApp = async ({ effects, state }) => {\n  state.isLoading = true;\n  state.pokemons = await effects.getPokemons();\n  state.isLoading = false;\n};\nexport const setSelectedPokedata = async ({ effects, state }, url) => { \n  state.isLoading = true;\n  state.selectedPokemon = await effects.getPokemonData(url); \n  state.isLoading = false;\n}; \nexport const setCachedPokemon = async ({ state }, cachedPokemon) => { \n   state.selectedPokemon = JSON.parse(cachedPokemon);\n };\n","import axios from \"axios\";\n\nexport const getPokemons = async () => {\n  const response = await axios.get(\"https://pokeapi.co/api/v2/pokemon\");\n  return response.data.results;\n};\n\nexport const getPokemonData = async (url) => {\n  const response = await axios.get(url);\n  return response.data;\n};\n","import { createHook } from \"overmind-react\";\nimport { state } from \"./state\";\nimport * as actions from \"./actions\";\nimport * as effects from \"./effects\";\n\nexport const config = {\n  state,\n  actions,\n  effects,\n};\nexport const useOvermind = createHook();\n","export const state = {\n  pokemons: [],\n  selectedPokemon: {},\n};\n","export default __webpack_public_path__ + \"static/media/loader.87d0d5d2.gif\";","import React, { useEffect, useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useOvermind } from \"../../overmind\";\nimport loader from \"../../assets/loader.gif\";\nimport { Popover, OverlayTrigger, Accordion, NavLink } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./styles.scss\";\n\nconst PokemonCard = ({ item }) => {\n  const [cardSelected, setCardSelected] = useState(false);\n  const [detailsOpened, setDetailsOpened] = useState(false);\n  const { state, actions } = useOvermind();\n  const { selectedPokemon } = state;\n\n  const popover = (\n    <Popover id=\"popover-basic\">\n      <Popover.Title as=\"h3\">Pokemon Details</Popover.Title>\n      <Popover.Content>\n        {state.isLoading && <img className=\"loader\" src={loader} />}\n        <div className=\"details-section\">\n          <p>Types: </p>\n          <ul>\n            {selectedPokemon.types &&\n              selectedPokemon.types.map((item, i) => {\n                return <li key={i}>{item.type.name} </li>;\n              })}\n          </ul>\n        </div>\n        <Accordion defaultActiveKey=\"0\">\n          <Accordion.Toggle\n            onClick={() => setDetailsOpened(!detailsOpened)}\n            as={NavLink}\n            variant=\"link\"\n            eventKey=\"1\"\n          >\n            {detailsOpened ? \"See Less\" : \"See More\"}\n          </Accordion.Toggle>\n          <Accordion.Collapse eventKey=\"1\">\n            <div className=\"details-section\">\n              <p>Stats: </p>\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th>Base Stat</th>\n                    <th>Effort</th>\n                    <th>Name</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {selectedPokemon.stats &&\n                    selectedPokemon.stats.map((item, i) => {\n                      return (\n                        <tr key={i}>\n                          <td>{item.base_stat}</td>\n                          <td>{item.effort}</td>\n                          <td>{item.stat.name}</td>\n                        </tr>\n                      );\n                    })}\n                </tbody>\n              </table>\n            </div>\n          </Accordion.Collapse>\n        </Accordion>\n      </Popover.Content>\n    </Popover>\n  );\n\n  function cacheAPIData(data) {\n    localStorage.setItem(item.name, JSON.stringify(data));\n  }\n  useEffect(() => {\n    if (cardSelected) {\n      if (!localStorage.getItem(item.name) || localStorage.getItem(\"bulbasaur\") === \"{}\") {\n        actions.setSelectedPokedata(item.url);\n      } else actions.setCachedPokemon(localStorage.getItem(item.name));\n    }\n  }, [cardSelected]);\n\n  return (\n    <Route\n      render={({ history }) => (\n        <OverlayTrigger\n          onToggle={() => setCardSelected(!cardSelected)}\n          onEntered={() => cacheAPIData(selectedPokemon)}\n          onEntering={() => {\n            history.push(`/PokeDexApp/pokemon/${item.name}`);\n          }}\n          trigger=\"click\"\n          placement=\"right-start\"\n          overlay={popover}\n          rootClose\n        >\n          <div className=\"pokemonCard\">\n            <div className=\"pokemonCard__heading\">\n              <div className=\"pokemonCard__heading__imagePlaceholder\">\n                <img src=\"https://cache.desktopnexus.com/thumbseg/1327/1327833-bigthumbnail.jpg\" />\n              </div>\n              <h3 className=\"pokemonCard__heading__title\">{item.name}</h3>\n            </div>\n          </div>\n        </OverlayTrigger>\n      )}\n    />\n  );\n};\n\nexport default PokemonCard;\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { useOvermind } from \"../../overmind\";\nimport PokemonCard from \"../PokemonCard/PokemonCard\";\nimport loader from \"../../assets/loader.gif\";\nimport \"./styles.scss\";\n\nconst PokeDex = () => {\n  const { state, actions } = useOvermind();\n  useEffect(() => {\n    actions.loadApp();\n  }, []);\n\n  return (\n    <div className=\"pokeDex-wrapper container\">\n      <div className=\"pokeDex-wrapper__heading\">\n        <img src=\"https://cdn.bulbagarden.net/upload/4/4b/Pok%C3%A9dex_logo.png\" />\n      </div>\n\n      {state.isLoading && <img className=\"loader\" src={loader} />}\n      <div className=\"pokeDex-wrapper__cards\">\n        {state.pokemons.map((item, index) => {\n          return (\n            <Router>\n              <PokemonCard key={index} item={item} />\n            </Router>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PokeDex;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PokeDex from \"./components/PokeDexWrapper/PokeDex\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createOvermind } from \"overmind\";\nimport { config } from \"./overmind\";\nimport { Provider } from \"overmind-react\";\n\nimport \"./index.css\";\nconst overmind = createOvermind(config, { devtools: true });\n\nReactDOM.render(\n  <Provider value={overmind}>\n    <PokeDex />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}